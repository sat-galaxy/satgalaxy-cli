name: Release Build with Zig

on:
  release:
    types: [published]

env:
  BIN_NAME: satgalaxy  # 替换为您的二进制名称
  VERSION: ${{ github.ref_name }}  # 从标签获取版本号
  ZIG_VERSION: 0.14.1  # 指定 Zig 版本

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 目标
          - os: ubuntu-latest
            targets: [
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-linux-musl",
              "aarch64-unknown-linux-gnu",
              "aarch64-unknown-linux-musl",
            ]
            ext: ""
          
          # macOS 目标
          - os: macos-latest
            targets: [
              "x86_64-apple-darwin",
              "aarch64-apple-darwin"
            ]
            ext: ""
          
          # Windows 目标
          - os: windows-latest
            targets: [
              "x86_64-pc-windows-msvc",
              "aarch64-pc-windows-msvc"
            ]
            ext: ".exe"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive  # 确保包含子模块

    - name: Install Zig
      run: |
        # 下载并安装 Zig
        wget https://ziglang.org/builds/zig-${{ env.ZIG_VERSION }}-${{ runner.os }}-${{ runner.arch }}.tar.xz
        tar -xf zig-*.tar.xz
        echo "$(pwd)/zig-${{ env.ZIG_VERSION }}-${{ runner.os }}-${{ runner.arch }}" >> $GITHUB_PATH

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rust-src

    - name: Install cargo-zigbuild
      run: cargo install cargo-zigbuild

    - name: Install CMake and build dependencies
      run: |
        # 安装 CMake 和其他构建依赖
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew update
          brew install cmake ninja pkg-config
        elif [ "${{ runner.os }}" = "Windows" ]; then
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install ninja
        fi

    - name: Build for all targets
      run: |
        # 为矩阵中的所有目标构建
        for target in ${{ join(matrix.targets, ' ') }}; do
          echo "Building for target: $target"
          
          # 设置目标名称用于文件名
          target_name=$(echo $target | sed 's/\./_/g' | tr '-' '_')
          
          # 使用 cargo-zigbuild 构建
          cargo zigbuild --release --target $target
          
          # 重命名二进制文件
          binary_path="target/${{ matrix.target }}/release/${{ env.BIN_NAME }}${{ matrix.ext }}"
          new_name="${{ env.BIN_NAME }}-v${{ env.VERSION }}-$target_name${{ matrix.ext }}"
          
          mv "$binary_path" "$new_name"
          echo "Built: $new_name"
        done

    - name: Create build info
      run: |
        # 创建构建信息文件
        echo "Version: ${{ env.VERSION }}" > build-info.txt
        echo "Build date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build-info.txt
        echo "Commit: ${{ github.sha }}" >> build-info.txt
        echo "Zig version: ${{ env.ZIG_VERSION }}" >> build-info.txt
        echo "Targets: ${{ join(matrix.targets, ', ') }}" >> build-info.txt

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.BIN_NAME }}-v${{ env.VERSION }}-*
          build-info.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}